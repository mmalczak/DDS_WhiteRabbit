#include "xparameters.h"
#include "xspi.h"
#include "xspi_l.h"
#include "xil_printf.h"


#define SPI_DEVICE_ID       XPAR_SPI_0_DEVICE_ID

int SpiSelfTestExample(u16 DeviceId);

XSpi Spi; /* The instance of the SPI device */

int spi_init(void);


int spi_send_data(u16 address, u8 data)
{
	u8 address_pointer[2] = {(u8)(address>>8), (u8)address};
	u8 data_pointer[1] = {data};
	u8 data_read[3];
	int Status=XST_SUCCESS;
	Status=XSpi_Transfer(&Spi, address_pointer, data_read, 2);
		if (Status != XST_SUCCESS) {
			xil_printf("failure2\n\r");
			return XST_FAILURE;
	}
	Status=XSpi_Transfer(&Spi, data_pointer, (data_read+2), 1);
	if (Status != XST_SUCCESS) {
		xil_printf("failure2\n\r");
		return XST_FAILURE;
	}
	return Status;
}


int main(void)
{

	int Status=spi_init();
	if(Status!=XST_SUCCESS) xil_printf("Initiatlization failure \n\r");




	spi_send_data(0x0142, 0x43);
	spi_send_data(0x0142, 0x42);

	spi_send_data(0x0232, 0x01);


	xil_printf("sukces\n\r");



	return XST_SUCCESS;
}



int spi_init(void)
{
	int Status;
	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */
	ConfigPtr = XSpi_LookupConfig(SPI_DEVICE_ID);
	if (ConfigPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}
	Status = XSpi_CfgInitialize(&Spi, ConfigPtr,
				  ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	Status = XSpi_SetOptions(&Spi, XSP_MASTER_OPTION);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	XSpi_Start(&Spi);
	XSpi_IntrGlobalDisable(&Spi);
	Status=XSpi_SetSlaveSelect(&Spi, 1);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

