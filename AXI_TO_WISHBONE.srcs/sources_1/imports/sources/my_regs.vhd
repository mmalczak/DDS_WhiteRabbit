---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for TEST_regs
---------------------------------------------------------------------------------------
-- File           : my_regs.vhd
-- Author         : auto-generated by wbgen2 from my_regs.wb
-- Created        : Fri Apr 13 16:38:38 2018
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE my_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wb_test_slave is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(4 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Port for std_logic_vector field: 'LEDS' in reg: 'LEDS register'
    wbt_led_o                                : out    std_logic_vector(1 downto 0);
-- Port for BIT field: 'PLL1_SYNCB' in reg: 'PLL1_SYNCB register'
    wbt_pll1_syncb_o                         : out    std_logic;
-- Port for std_logic_vector field: 'DDS' in reg: 'DDS register'
    wbt_dds_o                                : out    std_logic_vector(27 downto 0);
-- Port for std_logic_vector field: 'PLL freq' in reg: 'PLL frequency measurement register'
    wbt_pll_freq_i                           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'DDS freq' in reg: 'DDS frequency measurement register'
    wbt_dds_freq_i                           : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'CNT MASK' in reg: 'COUNTER MASK register'
    wbt_cnt_mask_o                           : out    std_logic_vector(31 downto 0);
-- Port for BIT field: 'SPI_START' in reg: 'SPI_START register'
    wbt_spi_start_o                          : out    std_logic;
-- Port for BIT field: 'SPI_CPOL' in reg: 'SPI_CPOL register'
    wbt_spi_cpol_o                           : out    std_logic;
-- Port for BIT field: 'SPI_CS_AD9516' in reg: 'SPI_CS_AD9516 register'
    wbt_spi_cs_ad9516_o                      : out    std_logic;
-- Port for BIT field: 'SPI_CS_AD9510' in reg: 'SPI_CS_AD9510 register'
    wbt_spi_cs_ad9510_o                      : out    std_logic;
-- Port for std_logic_vector field: 'SPI_DATA' in reg: 'SPI_DATA register'
    wbt_spi_data_o                           : out    std_logic_vector(7 downto 0);
-- Port for BIT field: 'ADF4002_LE' in reg: 'ADF4002_LE register'
    wbt_adf4002_le_o                         : out    std_logic;
-- Port for BIT field: 'PLL2_RESET_N' in reg: 'PLL2_RESET_N register'
    wbt_pll2_reset_n_o                       : out    std_logic;
-- Port for std_logic_vector field: 'SPI_DATA_IN' in reg: 'SPI_DATA_IN register'
    wbt_spi_data_in_i                        : in     std_logic_vector(7 downto 0);
-- Port for BIT field: 'SPI_ADC_START' in reg: 'SPI_ADC_START register'
    wbt_spi_adc_start_o                      : out    std_logic;
-- Port for BIT field: 'SPI_ADC_CPOL' in reg: 'SPI_ADC_CPOL register'
    wbt_spi_adc_cpol_o                       : out    std_logic;
-- Port for BIT field: 'SPI_ADC_CNV' in reg: 'SPI_ADC_CNV register'
    wbt_spi_adc_cnv_o                        : out    std_logic;
-- Port for std_logic_vector field: 'SPI_ADC_DATA_IN' in reg: 'SPI_ADC_DATA_IN register'
    wbt_spi_adc_data_in_i                    : in     std_logic_vector(15 downto 0);
-- Port for BIT field: 'SPI_ADC_SDI' in reg: 'SPI_ADC_SDI register'
    wbt_spi_adc_sdi_o                        : out    std_logic;
-- Port for std_logic_vector field: 'FILTER_IN' in reg: 'FILTER_IN register'
    wbt_filter_in_i                          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'FILTER_OUT' in reg: 'FILTER_OUT register'
    wbt_filter_out_o                         : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'FILTER_OUT' in reg: 'X0 register'
    wbt_x0_o                                 : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'FILTER_OUT' in reg: 'X1 register'
    wbt_x1_o                                 : out    std_logic_vector(31 downto 0)
  );
end wb_test_slave;

architecture syn of wb_test_slave is

signal wbt_led_int                              : std_logic_vector(1 downto 0);
signal wbt_pll1_syncb_int                       : std_logic      ;
signal wbt_dds_int                              : std_logic_vector(27 downto 0);
signal wbt_cnt_mask_int                         : std_logic_vector(31 downto 0);
signal wbt_spi_start_int                        : std_logic      ;
signal wbt_spi_cpol_int                         : std_logic      ;
signal wbt_spi_cs_ad9516_int                    : std_logic      ;
signal wbt_spi_cs_ad9510_int                    : std_logic      ;
signal wbt_spi_data_int                         : std_logic_vector(7 downto 0);
signal wbt_adf4002_le_int                       : std_logic      ;
signal wbt_pll2_reset_n_int                     : std_logic      ;
signal wbt_spi_adc_start_int                    : std_logic      ;
signal wbt_spi_adc_cpol_int                     : std_logic      ;
signal wbt_spi_adc_cnv_int                      : std_logic      ;
signal wbt_spi_adc_sdi_int                      : std_logic      ;
signal wbt_filter_out_int                       : std_logic_vector(31 downto 0);
signal wbt_x0_int                               : std_logic_vector(31 downto 0);
signal wbt_x1_int                               : std_logic_vector(31 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(4 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      wbt_led_int <= "00";
      wbt_pll1_syncb_int <= '0';
      wbt_dds_int <= "0000000000000000000000000000";
      wbt_cnt_mask_int <= "00000000000000000000000000000000";
      wbt_spi_start_int <= '0';
      wbt_spi_cpol_int <= '0';
      wbt_spi_cs_ad9516_int <= '0';
      wbt_spi_cs_ad9510_int <= '0';
      wbt_spi_data_int <= "00000000";
      wbt_adf4002_le_int <= '0';
      wbt_pll2_reset_n_int <= '0';
      wbt_spi_adc_start_int <= '0';
      wbt_spi_adc_cpol_int <= '0';
      wbt_spi_adc_cnv_int <= '0';
      wbt_spi_adc_sdi_int <= '0';
      wbt_filter_out_int <= "00000000000000000000000000000000";
      wbt_x0_int <= "00000000000000000000000000000000";
      wbt_x1_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(4 downto 0) is
          when "00000" => 
            if (wb_we_i = '1') then
              wbt_led_int <= wrdata_reg(1 downto 0);
            end if;
            rddata_reg(1 downto 0) <= wbt_led_int;
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001" => 
            if (wb_we_i = '1') then
              wbt_pll1_syncb_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_pll1_syncb_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010" => 
            if (wb_we_i = '1') then
              wbt_dds_int <= wrdata_reg(27 downto 0);
            end if;
            rddata_reg(27 downto 0) <= wbt_dds_int;
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= wbt_pll_freq_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= wbt_dds_freq_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101" => 
            if (wb_we_i = '1') then
              wbt_cnt_mask_int <= wrdata_reg(31 downto 0);
            end if;
            rddata_reg(31 downto 0) <= wbt_cnt_mask_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110" => 
            if (wb_we_i = '1') then
              wbt_spi_start_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_start_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111" => 
            if (wb_we_i = '1') then
              wbt_spi_cpol_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_cpol_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000" => 
            if (wb_we_i = '1') then
              wbt_spi_cs_ad9516_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_cs_ad9516_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001" => 
            if (wb_we_i = '1') then
              wbt_spi_cs_ad9510_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_cs_ad9510_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010" => 
            if (wb_we_i = '1') then
              wbt_spi_data_int <= wrdata_reg(7 downto 0);
            end if;
            rddata_reg(7 downto 0) <= wbt_spi_data_int;
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011" => 
            if (wb_we_i = '1') then
              wbt_adf4002_le_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_adf4002_le_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100" => 
            if (wb_we_i = '1') then
              wbt_pll2_reset_n_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_pll2_reset_n_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(7 downto 0) <= wbt_spi_data_in_i;
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110" => 
            if (wb_we_i = '1') then
              wbt_spi_adc_start_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_adc_start_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111" => 
            if (wb_we_i = '1') then
              wbt_spi_adc_cpol_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_adc_cpol_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000" => 
            if (wb_we_i = '1') then
              wbt_spi_adc_cnv_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_adc_cnv_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= wbt_spi_adc_data_in_i;
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010" => 
            if (wb_we_i = '1') then
              wbt_spi_adc_sdi_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= wbt_spi_adc_sdi_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= wbt_filter_in_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10100" => 
            if (wb_we_i = '1') then
              wbt_filter_out_int <= wrdata_reg(31 downto 0);
            end if;
            rddata_reg(31 downto 0) <= wbt_filter_out_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10101" => 
            if (wb_we_i = '1') then
              wbt_x0_int <= wrdata_reg(31 downto 0);
            end if;
            rddata_reg(31 downto 0) <= wbt_x0_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10110" => 
            if (wb_we_i = '1') then
              wbt_x1_int <= wrdata_reg(31 downto 0);
            end if;
            rddata_reg(31 downto 0) <= wbt_x1_int;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- LEDS
  wbt_led_o <= wbt_led_int;
-- PLL1_SYNCB
  wbt_pll1_syncb_o <= wbt_pll1_syncb_int;
-- DDS
  wbt_dds_o <= wbt_dds_int;
-- PLL freq
-- DDS freq
-- CNT MASK
  wbt_cnt_mask_o <= wbt_cnt_mask_int;
-- SPI_START
  wbt_spi_start_o <= wbt_spi_start_int;
-- SPI_CPOL
  wbt_spi_cpol_o <= wbt_spi_cpol_int;
-- SPI_CS_AD9516
  wbt_spi_cs_ad9516_o <= wbt_spi_cs_ad9516_int;
-- SPI_CS_AD9510
  wbt_spi_cs_ad9510_o <= wbt_spi_cs_ad9510_int;
-- SPI_DATA
  wbt_spi_data_o <= wbt_spi_data_int;
-- ADF4002_LE
  wbt_adf4002_le_o <= wbt_adf4002_le_int;
-- PLL2_RESET_N
  wbt_pll2_reset_n_o <= wbt_pll2_reset_n_int;
-- SPI_DATA_IN
-- SPI_ADC_START
  wbt_spi_adc_start_o <= wbt_spi_adc_start_int;
-- SPI_ADC_CPOL
  wbt_spi_adc_cpol_o <= wbt_spi_adc_cpol_int;
-- SPI_ADC_CNV
  wbt_spi_adc_cnv_o <= wbt_spi_adc_cnv_int;
-- SPI_ADC_DATA_IN
-- SPI_ADC_SDI
  wbt_spi_adc_sdi_o <= wbt_spi_adc_sdi_int;
-- FILTER_IN
-- FILTER_OUT
  wbt_filter_out_o <= wbt_filter_out_int;
-- FILTER_OUT
  wbt_x0_o <= wbt_x0_int;
-- FILTER_OUT
  wbt_x1_o <= wbt_x1_int;
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;